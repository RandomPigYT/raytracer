!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/randompigyt/raytracer/c_extension/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(LIBTARGET)	Makefile	/^$(LIBTARGET): $(SRCS)$/;"	t
$(OBJ)/%.o	Makefile	/^$(OBJ)\/%.o: $(SRC)\/%.c$/;"	t
$(TARGET)	Makefile	/^$(TARGET): $(OBJS)$/;"	t
BIN	Makefile	/^BIN:=bin$/;"	m
Best Practices	src/c-vector/README.md	/^# Best Practices$/;"	c
C Vector Library	src/c-vector/README.md	/^# C Vector Library$/;"	c
CC	Makefile	/^	CC = x86_64-w64-mingw32-gcc$/;"	m
CC	Makefile	/^CC:=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS:=-Wall -Wextra -g -std=gnu17 -O2$/;"	m
CREATE_DIR_COMMAND	Makefile	/^CREATE_DIR_COMMAND:=.\/dirs.sh$/;"	m
DIRS	Makefile	/^DIRS:=$(patsubst $(SRC)\/%, $(OBJ)\/%, $(shell find $(SRC)\/ -mindepth 1 -type d))$/;"	m
How It Works	src/c-vector/README.md	/^# How It Works$/;"	c
INCLUDE	Makefile	/^INCLUDE:=include$/;"	m
INCLUDES	Makefile	/^INCLUDES:=$(shell find $(INCLUDE) -type f -name "*.h")$/;"	m
LD	Makefile	/^LD:=ld$/;"	m
LDFLAGS	Makefile	/^ 	LDFLAGS = $(WINFLAGS)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS:=$/;"	m
LIB	Makefile	/^LIB:=lib$/;"	m
LIBTARGET	Makefile	/^	LIBTARGET = $(LIB)\/extension.dll$/;"	m
LIBTARGET	Makefile	/^LIBTARGET:=$(LIB)\/extension.so$/;"	m
MAX	src/constructBvh.c	/^inline float MAX(float x, float y){$/;"	f	typeref:typename:float
MIN	src/constructBvh.c	/^inline float MIN(float x, float y){$/;"	f	typeref:typename:float
NUM_BUCKETS	src/constructBvh.c	/^#define NUM_BUCKETS /;"	d	file:
OBJ	Makefile	/^OBJ:=obj$/;"	m
OBJS	Makefile	/^OBJS:=$(patsubst $(SRC)\/%.c, $(OBJ)\/%.o, $(SRCS))$/;"	m
PLATFORM	Makefile	/^PLATFORM:=linux$/;"	m
RAYTRACE_EXTENSION_H	include/extension.h	/^#define RAYTRACE_EXTENSION_H$/;"	d
Reference Sheet	src/c-vector/README.md	/^# Reference Sheet$/;"	c
SRC	Makefile	/^SRC:=src$/;"	m
SRCS	Makefile	/^SRCS:=$(shell find $(SRC) -type  f -name "*.c")$/;"	m
TARGET	Makefile	/^TARGET:=$(BIN)\/PigEngine.out$/;"	m
Usage	src/c-vector/README.md	/^# Usage$/;"	c
VAL_OUT	Makefile	/^VAL_OUT:=valgrind-out.txt$/;"	m
Visual Studio Reference Sheet	src/c-vector/README.md	/^# Visual Studio Reference Sheet$/;"	c
WINFLAGS	Makefile	/^WINFLAGS:=-L\/usr\/x86_64-mingw32\/bin\/cglm.dll$/;"	m
What About Structures?	src/c-vector/README.md	/^# What About Structures?$/;"	c
X_AXIS	src/constructBvh.c	/^enum axis_e { X_AXIS = 0, Y_AXIS = 1, Z_AXIS = 2 };$/;"	e	enum:axis_e	file:
Y_AXIS	src/constructBvh.c	/^enum axis_e { X_AXIS = 0, Y_AXIS = 1, Z_AXIS = 2 };$/;"	e	enum:axis_e	file:
Z_AXIS	src/constructBvh.c	/^enum axis_e { X_AXIS = 0, Y_AXIS = 1, Z_AXIS = 2 };$/;"	e	enum:axis_e	file:
_vector_add	src/c-vector/vec.c	/^void* _vector_add(vector* vec_addr, vec_type_t type_size) {$/;"	f	typeref:typename:void *
_vector_copy	src/c-vector/vec.c	/^vector _vector_copy(vector vec, vec_type_t type_size) {$/;"	f	typeref:typename:vector
_vector_erase	src/c-vector/vec.c	/^void _vector_erase(vector* vec_addr, vec_type_t type_size, vec_size_t pos,$/;"	f	typeref:typename:void
_vector_insert	src/c-vector/vec.c	/^void* _vector_insert(vector* vec_addr, vec_type_t type_size, vec_size_t pos) {$/;"	f	typeref:typename:void *
_vector_remove	src/c-vector/vec.c	/^void _vector_remove(vector* vec_addr, vec_type_t type_size, vec_size_t pos) {$/;"	f	typeref:typename:void
addOffset	src/addOffset.c	/^void* addOffset(void* ptr, uint64_t n, uint64_t size, int8_t sign) {$/;"	f	typeref:typename:void *
all	Makefile	/^all: dirs $(TARGET)$/;"	t
alloc	src/c-vector/vec.c	/^  vec_size_t alloc;  \/\/ stores the number of bytes allocated$/;"	m	struct:vector_data	typeref:typename:vec_size_t	file:
axis_e	src/constructBvh.c	/^enum axis_e { X_AXIS = 0, Y_AXIS = 1, Z_AXIS = 2 };$/;"	g	file:
buff	src/c-vector/vec.c	/^  char buff[];  \/\/ use char to store bytes of an unknown type$/;"	m	struct:vector_data	typeref:typename:char[]	file:
bvhNodeInfo_t	src/constructBvh.c	/^struct bvhNodeInfo_t {$/;"	s	file:
bvh_t	include/extension.h	/^struct bvh_t {$/;"	s
calcCentroids	src/constructBvh.c	/^vec4* calcCentroids(struct sceneInfo_t* s) {$/;"	f	typeref:typename:vec4 *
calcSurfaceArea	src/constructBvh.c	/^float calcSurfaceArea(vec4* volume){$/;"	f	typeref:typename:float
clean	Makefile	/^clean:$/;"	t
constructBvh	src/constructBvh.c	/^struct bvh_t* constructBvh(uint32_t* numBvh, struct vertex_t* verts,$/;"	f	typeref:struct:bvh_t *
constructTree	src/constructBvh.c	/^void constructTree(struct bvh_t** b, struct bvhNodeInfo_t** bvhInfo,$/;"	f	typeref:typename:void
constructVolumes	src/constructBvh.c	/^vec4* constructVolumes(struct sceneInfo_t* s, vec4* centroids,$/;"	f	typeref:typename:vec4 *
corner1	include/extension.h	/^  vec4 corner1;$/;"	m	struct:bvh_t	typeref:typename:vec4
corner2	include/extension.h	/^  vec4 corner2;$/;"	m	struct:bvh_t	typeref:typename:vec4
dirs	Makefile	/^dirs:$/;"	t
face_t	include/extension.h	/^struct face_t {$/;"	s
findOptimalVolumes	src/constructBvh.c	/^vec4* findOptimalVolumes(struct sceneInfo_t* s, vec4* centroids,$/;"	f	typeref:typename:vec4 *
format	Makefile	/^format:$/;"	t
generateVerts	src/generateVerts.c	/^void generateVerts(struct vertex_t** outVecBuf, float* v, float* vn, float* vt,$/;"	f	typeref:typename:void
getCorners	src/constructBvh.c	/^vec4* getCorners(struct vertex_t* verts, uint32_t* triangles) {$/;"	f	typeref:typename:vec4 *
hitIndex	include/extension.h	/^  int32_t hitIndex;$/;"	m	struct:bvh_t	typeref:typename:int32_t
left	src/constructBvh.c	/^  int64_t left;$/;"	m	struct:bvhNodeInfo_t	typeref:typename:int64_t	file:
length	src/c-vector/vec.c	/^  vec_size_t length;$/;"	m	struct:vector_data	typeref:typename:vec_size_t	file:
lib	Makefile	/^lib: $(LIBTARGET)$/;"	t
missIndex	include/extension.h	/^  int32_t missIndex;$/;"	m	struct:bvh_t	typeref:typename:int32_t
normal	include/extension.h	/^  vec4 normal;$/;"	m	struct:vertex_t	typeref:typename:vec4
numTris	include/extension.h	/^  uint32_t numTris;$/;"	m	struct:bvh_t	typeref:typename:uint32_t
numVerts	src/constructBvh.c	/^  uint32_t numVerts;$/;"	m	struct:sceneInfo_t	typeref:typename:uint32_t	file:
optimalVolumeInAxis	src/constructBvh.c	/^vec4* optimalVolumeInAxis(float* cost, enum axis_e axis, struct sceneInfo_t* s,$/;"	f	typeref:typename:vec4 *
padding0	include/extension.h	/^  int32_t padding0;$/;"	m	struct:bvh_t	typeref:typename:int32_t
padding2	include/extension.h	/^  vec2 padding2;$/;"	m	struct:vertex_t	typeref:typename:vec2
parent	src/constructBvh.c	/^  int64_t parent;$/;"	m	struct:bvhNodeInfo_t	typeref:typename:int64_t	file:
position	include/extension.h	/^  vec4 position;$/;"	m	struct:vertex_t	typeref:typename:vec4
right	src/constructBvh.c	/^  int64_t right;$/;"	m	struct:bvhNodeInfo_t	typeref:typename:int64_t	file:
run	Makefile	/^run: $(TARGET)$/;"	t
sceneInfo_t	src/constructBvh.c	/^struct sceneInfo_t {$/;"	s	file:
textureCoord	include/extension.h	/^  vec2 textureCoord;$/;"	m	struct:vertex_t	typeref:typename:vec2
triIndices	include/extension.h	/^  uint32_t triIndices[4];$/;"	m	struct:bvh_t	typeref:typename:uint32_t[4]
triangles	src/constructBvh.c	/^  uint32_t* triangles;  \/\/ Vector$/;"	m	struct:bvhNodeInfo_t	typeref:typename:uint32_t *	file:
v_index	include/extension.h	/^  int32_t v_index;$/;"	m	struct:face_t	typeref:typename:int32_t
valgrind	Makefile	/^valgrind:$/;"	t
vec_char	src/c-vector/vec.h	/^typedef char* vec_char;$/;"	t	typeref:typename:char *
vec_h	src/c-vector/vec.h	/^#define vec_h$/;"	d
vec_int	src/c-vector/vec.h	/^typedef int* vec_int;$/;"	t	typeref:typename:int *
vec_size_t	src/c-vector/vec.h	/^typedef size_t vec_size_t;	  \/\/ stores the number of elements$/;"	t	typeref:typename:size_t
vec_type_t	src/c-vector/vec.h	/^typedef unsigned char vec_type_t; \/\/ stores the number of bytes for a type$/;"	t	typeref:typename:unsigned char
vector	src/c-vector/vec.h	/^typedef void* vector; \/\/ you can't use this to store vectors, it's just used$/;"	t	typeref:typename:void *
vector_add	src/c-vector/vec.h	/^#define vector_add(/;"	d
vector_add	src/c-vector/vec.h	/^#define vector_add(vec_addr, value) (*vector_add_/;"	d
vector_add_asg	src/c-vector/vec.h	/^#define vector_add_asg(/;"	d
vector_alloc	src/c-vector/vec.c	/^vector_data* vector_alloc(vec_size_t alloc, vec_size_t size) {$/;"	f	typeref:typename:vector_data *
vector_copy	src/c-vector/vec.h	/^#define vector_copy(vec) (_vector_copy(/;"	d
vector_create	src/c-vector/vec.c	/^vector vector_create(void) {$/;"	f	typeref:typename:vector
vector_data	src/c-vector/vec.c	/^struct vector_data {$/;"	s	file:
vector_data	src/c-vector/vec.c	/^typedef struct vector_data vector_data;$/;"	t	typeref:struct:vector_data	file:
vector_erase	src/c-vector/vec.h	/^#define vector_erase(/;"	d
vector_free	src/c-vector/vec.c	/^void vector_free(vector vec) { free(vector_get_data(vec)); }$/;"	f	typeref:typename:void
vector_get_alloc	src/c-vector/vec.c	/^vec_size_t vector_get_alloc(vector vec) { return vector_get_data(vec)->alloc; }$/;"	f	typeref:typename:vec_size_t
vector_get_data	src/c-vector/vec.c	/^vector_data* vector_get_data(vector vec) { return &((vector_data*)vec)[-1]; }$/;"	f	typeref:typename:vector_data *
vector_has_space	src/c-vector/vec.c	/^bool vector_has_space(vector_data* v_data) {$/;"	f	typeref:typename:bool
vector_insert	src/c-vector/vec.h	/^#define vector_insert(/;"	d
vector_insert_asg	src/c-vector/vec.h	/^#define vector_insert_asg(/;"	d
vector_pop	src/c-vector/vec.c	/^void vector_pop(vector vec) { --vector_get_data(vec)->length; }$/;"	f	typeref:typename:void
vector_realloc	src/c-vector/vec.c	/^vector_data* vector_realloc(vector_data* v_data, vec_type_t type_size) {$/;"	f	typeref:typename:vector_data *
vector_remove	src/c-vector/vec.h	/^#define vector_remove(/;"	d
vector_size	src/c-vector/vec.c	/^vec_size_t vector_size(vector vec) { return vector_get_data(vec)->length; }$/;"	f	typeref:typename:vec_size_t
vertex_t	include/extension.h	/^struct vertex_t {$/;"	s
verts	src/constructBvh.c	/^  struct vertex_t* verts;$/;"	m	struct:sceneInfo_t	typeref:struct:vertex_t *	file:
vn_index	include/extension.h	/^  int32_t vn_index;$/;"	m	struct:face_t	typeref:typename:int32_t
vt_index	include/extension.h	/^  int32_t vt_index;$/;"	m	struct:face_t	typeref:typename:int32_t
