!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/randompigyt/raytracer/c_extension/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(LIBTARGET)	Makefile	/^$(LIBTARGET): $(SRCS)$/;"	t
$(OBJ)/%.o	Makefile	/^$(OBJ)\/%.o: $(SRC)\/%.c$/;"	t
$(TARGET)	Makefile	/^$(TARGET): $(OBJS)$/;"	t
BIN	Makefile	/^BIN:=bin$/;"	m
CC	Makefile	/^	CC = x86_64-w64-mingw32-gcc$/;"	m
CC	Makefile	/^CC:=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS:=-Wall -Wextra -Werror -g -std=gnu17 -O2$/;"	m
CREATE_DIR_COMMAND	Makefile	/^CREATE_DIR_COMMAND:=.\/dirs.sh$/;"	m
DIRS	Makefile	/^DIRS:=$(patsubst $(SRC)\/%, $(OBJ)\/%, $(shell find $(SRC)\/ -mindepth 1 -type d))$/;"	m
INCLUDE	Makefile	/^INCLUDE:=include$/;"	m
INCLUDES	Makefile	/^INCLUDES:=$(shell find $(INCLUDE) -type f -name "*.h")$/;"	m
LD	Makefile	/^LD:=ld$/;"	m
LDFLAGS	Makefile	/^ 	LDFLAGS = $(WINFLAGS)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS:=$/;"	m
LIB	Makefile	/^LIB:=lib$/;"	m
LIBTARGET	Makefile	/^	LIBTARGET = $(LIB)\/extension.dll$/;"	m
LIBTARGET	Makefile	/^LIBTARGET:=$(LIB)\/extension.so$/;"	m
OBJ	Makefile	/^OBJ:=obj$/;"	m
OBJS	Makefile	/^OBJS:=$(patsubst $(SRC)\/%.c, $(OBJ)\/%.o, $(SRCS))$/;"	m
PLATFORM	Makefile	/^PLATFORM:=linux$/;"	m
RAYTRACE_EXTENSION_H	include/extension.h	/^#define RAYTRACE_EXTENSION_H$/;"	d
SRC	Makefile	/^SRC:=src$/;"	m
SRCS	Makefile	/^SRCS:=$(shell find $(SRC) -type  f -name "*.c")$/;"	m
TARGET	Makefile	/^TARGET:=$(BIN)\/PigEngine.out$/;"	m
VAL_OUT	Makefile	/^VAL_OUT:=valgrind-out.txt$/;"	m
WINFLAGS	Makefile	/^WINFLAGS:=-L\/usr\/x86_64-mingw32\/bin\/cglm.dll$/;"	m
addOffset	src/addOffset.c	/^void* addOffset(void* ptr, uint64_t n, uint64_t size, int8_t sign) {$/;"	f	typeref:typename:void *
all	Makefile	/^all: dirs $(TARGET)$/;"	t
clean	Makefile	/^clean:$/;"	t
dirs	Makefile	/^dirs:$/;"	t
face_t	include/extension.h	/^struct face_t {$/;"	s
format	Makefile	/^format:$/;"	t
generateVerts	src/sortVertices.c	/^void generateVerts(struct vertex_t** outVecBuf, float* v, float* vn, float* vt, $/;"	f	typeref:typename:void
lib	Makefile	/^lib: $(LIBTARGET)$/;"	t
normal	include/extension.h	/^  vec3 normal;$/;"	m	struct:vertex_t	typeref:typename:vec3
padding0	include/extension.h	/^  float padding0;$/;"	m	struct:vertex_t	typeref:typename:float
padding1	include/extension.h	/^  float padding1;$/;"	m	struct:vertex_t	typeref:typename:float
padding2	include/extension.h	/^  float padding2;$/;"	m	struct:vertex_t	typeref:typename:float
position	include/extension.h	/^  vec3 position;$/;"	m	struct:vertex_t	typeref:typename:vec3
run	Makefile	/^run: $(TARGET)$/;"	t
textureCoord	include/extension.h	/^  vec2 textureCoord;$/;"	m	struct:vertex_t	typeref:typename:vec2
v_index	include/extension.h	/^	int32_t v_index;$/;"	m	struct:face_t	typeref:typename:int32_t
valgrind	Makefile	/^valgrind:$/;"	t
vertex_t	include/extension.h	/^struct vertex_t {$/;"	s
vn_index	include/extension.h	/^	int32_t vn_index;$/;"	m	struct:face_t	typeref:typename:int32_t
vt_index	include/extension.h	/^	int32_t vt_index;$/;"	m	struct:face_t	typeref:typename:int32_t
